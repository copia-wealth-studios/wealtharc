# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule VidarAPI.Api.Assets do
  @moduledoc """
  API calls for all endpoints tagged `Assets`.
  """

  alias VidarAPI.Connection
  import VidarAPI.RequestBuilder

  @doc """
  Get asset by id
  This endpoint uses OData. All operators are supported.    To make it as fast as possible please select the smallest required data set.    Examples:  Selecting data set: /Assets/{key}?$select=id, name, iban, currency  

  ### Parameters

  - `connection` (VidarAPI.Connection): Connection to server
  - `key` (integer()): Asset unique id
  - `opts` (keyword): Optional parameters
    - `:select` (String.t): Limits the properties returned in the result.
    - `:expand` (String.t): Indicates the related entities to be represented inline. The maximum depth is 2.

  ### Returns

  - `{:ok, VidarAPI.Model.AssetODataResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_asset(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, VidarAPI.Model.AssetODataResponse.t} | {:error, Tesla.Env.t}
  def get_asset(connection, key, opts \\ []) do
    optional_params = %{
      :select => :query,
      :expand => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/Assets/#{key}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, VidarAPI.Model.AssetODataResponse},
      {404, false}
    ])
  end

  @doc """
  Get all assets
  This endpoint uses OData. All operators are supported.    To make it as fast as possible please select the smallest required data set.    Examples:    Selecting data set: /Assets?$select=id, name, iban, currency    Filtering data set: /Assets?$filter=name eq 'CASH ACCOUNT IN CHF' or name eq 'CASH ACCOUNT IN USD'

  ### Parameters

  - `connection` (VidarAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:select` (String.t): Limits the properties returned in the result.
    - `:expand` (String.t): Indicates the related entities to be represented inline. The maximum depth is 2.
    - `:filter` (String.t): Filter the results using OData syntax.
    - `:orderby` (String.t): Order the results using OData syntax.
    - `:top` (integer()): Maximum number of results to return.
    - `:skip` (integer()): Number of results to skip.
    - `:count` (boolean()): Whether to include a count of results.

  ### Returns

  - `{:ok, VidarAPI.Model.AssetODataCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_assets(Tesla.Env.client, keyword()) :: {:ok, VidarAPI.Model.AssetODataCollectionResponse.t} | {:error, Tesla.Env.t}
  def get_assets(connection, opts \\ []) do
    optional_params = %{
      :select => :query,
      :expand => :query,
      :filter => :query,
      :orderby => :query,
      :top => :query,
      :skip => :query,
      :count => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/Assets")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, VidarAPI.Model.AssetODataCollectionResponse}
    ])
  end

  @doc """
  Get all cash accounts
  This endpoint uses OData. All operators are supported.    To make it as fast as possible please select the smallest required data set.    Examples:    Selecting data set: /Assets/WealthArc.CashAccount?$select=id, name, iban, currency    Filtering data set: /Assets/WealthArc.CashAccount?$filter=name eq 'CASH ACCOUNT IN CHF' or name eq 'CASH ACCOUNT IN USD'

  ### Parameters

  - `connection` (VidarAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:select` (String.t): Limits the properties returned in the result.
    - `:expand` (String.t): Indicates the related entities to be represented inline. The maximum depth is 2.
    - `:filter` (String.t): Filter the results using OData syntax.
    - `:orderby` (String.t): Order the results using OData syntax.
    - `:top` (integer()): Maximum number of results to return.
    - `:skip` (integer()): Number of results to skip.
    - `:count` (boolean()): Whether to include a count of results.

  ### Returns

  - `{:ok, VidarAPI.Model.CashAccountODataCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_cash_accounts(Tesla.Env.client, keyword()) :: {:ok, VidarAPI.Model.CashAccountODataCollectionResponse.t} | {:error, Tesla.Env.t}
  def get_cash_accounts(connection, opts \\ []) do
    optional_params = %{
      :select => :query,
      :expand => :query,
      :filter => :query,
      :orderby => :query,
      :top => :query,
      :skip => :query,
      :count => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/Assets/WealthArc.CashAccount")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, VidarAPI.Model.CashAccountODataCollectionResponse}
    ])
  end

  @doc """
  Get all instruments
  This endpoint uses OData. All operators are supported.    To make it as fast as possible please select the smallest required data set.    Examples:    Selecting data set: /Assets/WealthArc.Instrument?$select=id, name, isin, currency    Filtering data set: /Assets/WealthArc.Instrument?$filter=name eq 'Restaurant Brands'

  ### Parameters

  - `connection` (VidarAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:select` (String.t): Limits the properties returned in the result.
    - `:expand` (String.t): Indicates the related entities to be represented inline. The maximum depth is 2.
    - `:filter` (String.t): Filter the results using OData syntax.
    - `:orderby` (String.t): Order the results using OData syntax.
    - `:top` (integer()): Maximum number of results to return.
    - `:skip` (integer()): Number of results to skip.
    - `:count` (boolean()): Whether to include a count of results.

  ### Returns

  - `{:ok, VidarAPI.Model.InstrumentODataCollectionResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_instruments(Tesla.Env.client, keyword()) :: {:ok, VidarAPI.Model.InstrumentODataCollectionResponse.t} | {:error, Tesla.Env.t}
  def get_instruments(connection, opts \\ []) do
    optional_params = %{
      :select => :query,
      :expand => :query,
      :filter => :query,
      :orderby => :query,
      :top => :query,
      :skip => :query,
      :count => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/v1/Assets/WealthArc.Instrument")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, VidarAPI.Model.InstrumentODataCollectionResponse}
    ])
  end
end
